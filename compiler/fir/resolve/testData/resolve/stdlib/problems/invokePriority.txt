FILE: invokePriority.kt
    public final class A : R|kotlin/Any| {
        public constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final fun bar(): R|kotlin/Unit| {
            lval foo: R|kotlin/String.() -> kotlin/Unit| = fun R|kotlin/String|.<anonymous>(): R|kotlin/Unit| {
                Unit
            }

            local final fun R|kotlin/String|.foo(): R|kotlin/Unit| {
            }

            String(1).R|<local>/foo|()
            R|kotlin/with|<R|kotlin/String|, R|kotlin/Unit|>(String(2), <L> = with@fun R|kotlin/String|.<anonymous>(): R|kotlin/Unit| <kind=EXACTLY_ONCE>  {
                this@R|special/anonymous|.R|<local>/foo|()
            }
            )
        }

    }
    public final class B : R|kotlin/Any| {
        public constructor(): R|B| {
            super<R|kotlin/Any|>()
        }

        public final val foo: R|kotlin/String.() -> kotlin/Unit| = fun R|kotlin/String|.<anonymous>(): R|kotlin/Unit| {
            Unit
        }

            public get(): R|kotlin/String.() -> kotlin/Unit|

        public final fun R|kotlin/String|.foo(): R|kotlin/Unit| {
        }

        public final fun bar(): R|kotlin/Unit| {
            (this@R|/B|, String(1)).R|/B.foo|()
            R|kotlin/with|<R|kotlin/String|, R|kotlin/Unit|>(String(2), <L> = with@fun R|kotlin/String|.<anonymous>(): R|kotlin/Unit| <kind=EXACTLY_ONCE>  {
                (this@R|/B|, this@R|special/anonymous|).R|/B.foo|()
            }
            )
        }

    }
    public final class E : R|kotlin/Any| {
        public constructor(): R|E| {
            super<R|kotlin/Any|>()
        }

        public final object f : R|kotlin/Any| {
            private constructor(): R|E.f| {
                super<R|kotlin/Any|>()
            }

            public final operator fun invoke(): R|kotlin/Unit| {
                ^invoke Q|kotlin/Unit|
            }

        }

        public final companion object Companion : R|kotlin/Any| {
            private constructor(): R|E.Companion| {
                super<R|kotlin/Any|>()
            }

            public final val f: R|() -> kotlin/Unit| = fun <anonymous>(): R|kotlin/Unit| {
                Unit
            }

                public get(): R|() -> kotlin/Unit|

        }

    }
    public final class AHolder : R|kotlin/Any| {
        public constructor(a: R|kotlin/Int|): R|AHolder| {
            super<R|kotlin/Any|>()
        }

        public final val a: R|kotlin/Int| = R|<local>/a|
            public get(): R|kotlin/Int|

    }
    public final class F : R|kotlin/Any| {
        public constructor(): R|F| {
            super<R|kotlin/Any|>()
        }

        public final object foo : R|kotlin/Any| {
            private constructor(): R|F.foo| {
                super<R|kotlin/Any|>()
            }

            public final val a: R|kotlin/Int| = Int(42)
                public get(): R|kotlin/Int|

        }

        public final companion object Companion : R|kotlin/Any| {
            private constructor(): R|F.Companion| {
                super<R|kotlin/Any|>()
            }

            public final val foo: R|AHolder| = R|/AHolder.AHolder|(Int(52))
                public get(): R|AHolder|

        }

    }
    public final class FF : R|kotlin/Any| {
        public constructor(): R|FF| {
            super<R|kotlin/Any|>()
        }

        public final object foo : R|kotlin/Any| {
            private constructor(): R|FF.foo| {
                super<R|kotlin/Any|>()
            }

        }

        public final companion object Companion : R|kotlin/Any| {
            private constructor(): R|FF.Companion| {
                super<R|kotlin/Any|>()
            }

            public final val foo: R|AHolder| = R|/AHolder.AHolder|(Int(52))
                public get(): R|AHolder|

        }

    }
    public final fun main(): R|kotlin/Unit| {
        Q|E|.R|/E.Companion.f|.R|/E.f.invoke|()
        Q|E.f|.R|/E.f.invoke|()
        Q|F.foo|.R|/F.foo.a|
        Q|F.foo|
        R|kotlin/with|<R|F.foo|, R|kotlin/Int|>(Q|F.foo|, <L> = with@fun R|F.foo|.<anonymous>(): R|kotlin/Int| <kind=EXACTLY_ONCE>  {
            ^ this@R|special/anonymous|.R|/F.foo.a|
        }
        )
        Q|FF.foo|.<Unresolved name: a>#
    }
